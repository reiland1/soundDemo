/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author reiland
 */
import javax.sound.midi.*;
import java.util.*;


public class PushButton extends javax.swing.JFrame {

    /** Creates new form PushButton */
    public PushButton() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bubblesort = new javax.swing.JButton();
        isEvenOrOdd = new javax.swing.JButton();
        linearSearch = new javax.swing.JButton();
        mergeSort = new javax.swing.JButton();
        jumpSearch = new javax.swing.JButton();
        fibonacci = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        quickSort = new javax.swing.JButton();
        binarySearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 120, 120));
        setLocation(new java.awt.Point(0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bubblesort.setText("Bubblesort");
        bubblesort.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bubblesort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubblesortActionPerformed(evt);
            }
        });
        getContentPane().add(bubblesort, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 120, -1));

        isEvenOrOdd.setText("Even or odd");
        isEvenOrOdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isEvenOrOddActionPerformed(evt);
            }
        });
        getContentPane().add(isEvenOrOdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 120, -1));

        linearSearch.setText("Linear search");
        linearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearSearchActionPerformed(evt);
            }
        });
        getContentPane().add(linearSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 50, 120, -1));

        mergeSort.setText("Mergesort");
        mergeSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeSortActionPerformed(evt);
            }
        });
        getContentPane().add(mergeSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 120, -1));

        jumpSearch.setText("Jump Search");
        getContentPane().add(jumpSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 150, 120, -1));

        fibonacci.setText("Fibonacci");
        fibonacci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fibonacciActionPerformed(evt);
            }
        });
        getContentPane().add(fibonacci, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 120, -1));

        jButton7.setText("Power of 2");
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 120, -1));

        quickSort.setText("Quick sort");
        quickSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickSortActionPerformed(evt);
            }
        });
        getContentPane().add(quickSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 120, -1));

        binarySearch.setText("Binary Search");
        binarySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarySearchActionPerformed(evt);
            }
        });
        getContentPane().add(binarySearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, 120, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    
    private void bubblesortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubblesortActionPerformed
//bubblesort
        int numNotes=32; 
        int silent = 0;
        int notSilent = 1;
        
        int keys = 1;
        int bells = 14;
        int guitar = 24;
        int bass = 39;
        int strings = 48;
        int trumpet = 58;
        //the 60's seem to also be trumpet like
        int flute = 78;
        int organ = 89;
        int note = 44;
        int x = 1;
        // the upper 90s kinda sounds like warpy string. 88 sounds like two 
        //different instuments played together
        //1400 behind, 840, 9-1 m-TH 

        try{
            int array[] = {9, 2, 5, 6, 3, 15, 23, 1, 6, 54, 33, 12};

            for (int i = 0; i < array.length; i++) {
                eighthNote(numNotes, bells, note, notSilent, notSilent);
               // eighthNote(numNotes, bells, 68, silent, silent);
                //eighthNote(numNotes, bells, 68, silent, silent);
                //eighthNote(numNotes, bass, 35, silent, silent);
                for (int j = 1; j < array.length; j++) {
                    eighthNote(numNotes, bells, note+=x, notSilent, notSilent);
                   // eighthNote(numNotes, bells, 78, silent, silent);
                    //eighthNote(numNotes, bells, 78, silent, silent);
                    //eighthNote(numNotes, bass, 35, silent, silent);

                    if (array[j - 1] > array[j]) {
                        //eighthNote(numNotes, organ, note+2, notSilent, notSilent);
                        //eighthNote(numNotes, organ, 74, silent, silent);
                       // eighthNote(numNotes, organ, 74, silent, silent);
                        
                        //eighthNote(numNotes, bass, 35, silent, silent);
                        int temp = array[j - 1];
                        eighthNote(numNotes, organ, 71, notSilent, notSilent);
                       // eighthNote(numNotes, organ, 76, silent, silent);
                       // eighthNote(numNotes, organ, 76, silent, silent);
                        
                       // eighthNote(numNotes, bass, 35, silent, silent);
                        array[j - 1] = array[j];
                        eighthNote(numNotes, organ, 68, notSilent, notSilent);
                        //eighthNote(numNotes, organ, 78, silent, silent);
                        //eighthNote(numNotes, organ, 78, silent, silent);
                        
                        //eighthNote(numNotes, bass, 35, silent, silent);
                        array[j] = temp;
                        eighthNote(numNotes, organ, 74, notSilent, notSilent);
                       // eighthNote(numNotes, organ, 74, silent, silent);
                        //eighthNote(numNotes, organ, 74, silent, silent);
                       // eighthNote(numNotes, bass, 35, silent, silent);
                        
                        }
                    
                    
                    }
                note-=12;
                
                }
            System.out.println(Arrays.toString(array));

            

        
        }
        catch(Exception ex){
           ex.printStackTrace();
        }
    
              
   

    }//GEN-LAST:event_bubblesortActionPerformed

    private void isEvenOrOddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isEvenOrOddActionPerformed
        //even or odd
        int numNotes=32; 
        int silent = 0;
        int notSilent = 1;
        
        int keys = 1;
        int bells = 14;
        int guitar = 24;
        int bass = 39;
        int strings = 48;
        int trumpet = 58;
        //the 60's seem to also be trumpet like
        int flute = 78;
        int organ = 89;
        // the upper 90s kinda sounds like warpy string. 88 sounds like two 
        //different instuments played together
        //1400 behind, 840, 9-1 m-TH 
        try{
        for(int i = 1; i<16; i++){
                if (i%2==0){
                    eighthNote(numNotes, bells, 54, notSilent, notSilent);
                    eighthNote(numNotes, bells, 54, silent, silent);
                    eighthNote(numNotes, bells, 54, silent, silent);
                    //eighthNote(numNotes, bass, 35, silent, silent);
                    
                    }
                else{
                    eighthNote(numNotes, bells, 56, notSilent, notSilent);
                    eighthNote(numNotes, bells, 56, silent, silent);
                    eighthNote(numNotes, bells, 56, silent, silent);
                    //eighthNote(numNotes, 58, 56, silent, silent);
                
                }
                
                eighthNote(numNotes, bells, 50, notSilent, notSilent);
                eighthNote(numNotes, bells, 50, silent, silent);
                eighthNote(numNotes, bells, 50, silent, silent);
                //eighthNote(numNotes, 45, 55, silent, silent);
            }
        }
        catch(Exception ex){
           ex.printStackTrace();
        }
      
        
    }//GEN-LAST:event_isEvenOrOddActionPerformed

    private void linearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearSearchActionPerformed
        // linear search
        int numNotes=32; 
        int silent = 0;
        int notSilent = 1;
        
        int keys = 1;
        int bells = 14;
        int guitar = 24;
        int bass = 39;
        int strings = 48;
        int trumpet = 58;
        //the 60's seem to also be trumpet like
        int flute = 78;
        int organ = 89;
        // the upper 90s kinda sounds like warpy string. 88 sounds like two 
        //different instuments played together
        //1400 behind, 840, 9-1 m-TH 

        try{
            int array[] = {9, 2, 5, 4, 3, 4, 6, 21, 54, 3, 23, 32, 0, 8};

            int x = 5;
            int note = 30;
            
            for (int i = 0; i < array.length; i++){
                eighthNote(numNotes, keys, note+=1, notSilent, notSilent);
                eighthNote(2, keys, note++, silent, silent);
               // eighthNote(numNotes, keys, note++, silent, silent);
                //eighthNote(numNotes, keys, note++, silent, silent);
                if (array[i]==x){
                    eighthNote(numNotes, flute, 78, notSilent, notSilent);
                    eighthNote(numNotes, keys, note++, silent, silent);
                    eighthNote(numNotes, flute, 78, notSilent, notSilent);
                    
                    eighthNote(numNotes, flute, 78, notSilent, notSilent);
                    eighthNote(numNotes, keys, note++, silent, silent);
                    eighthNote(numNotes, flute, 78, notSilent, notSilent);
                    System.out.println(i+1);
                    return;
                    
                }
                else{
                eighthNote(numNotes, bass, 45, notSilent, notSilent);
                eighthNote(2, bass, 45, silent, silent);
                //eighthNote(numNotes, bass, 45, silent, silent);
                //eighthNote(numNotes, bass, 45, silent, silent);
                }
            }
            
            
            //System.out.println(Arrays.toString(array));

            

        
        }
        catch(Exception ex){
           ex.printStackTrace();
        }
    
    }//GEN-LAST:event_linearSearchActionPerformed

    private void fibonacciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fibonacciActionPerformed
        // Fibonacci
        int numNotes=32; 

        int silent = 0;

        int notSilent = 1;

        
        int keys = 1;
        int bells = 14;
        int guitar = 24;
        int bass = 39;
        int strings = 48;
        int trumpet = 58;
        //the 60's seem to also be trumpet like
        int flute = 78;
        int organ = 89;
        int x=59;
        int note = 32;
        
        // the upper 90s kinda sounds like warpy string. 88 sounds like two 
        //different instuments played together
        //1400 behind, 840, 9-1 m-TH 
        
        try{
            int n1=0;
            eighthNote(numNotes, keys, 45, notSilent, notSilent);
            int n2=1;
            eighthNote(numNotes, keys, 46, notSilent, notSilent);
            int n3;
            eighthNote(numNotes, keys, 45, notSilent, notSilent);
            int count=10;
            eighthNote(numNotes, keys, 46, notSilent, notSilent);
            
            System.out.print(n1+" "+n2); 
            eighthNote(numNotes, strings, 59, notSilent, notSilent);
    
            for(int i=2; i<count; i++){  
                eighthNote(numNotes, bells, 55, notSilent, notSilent);
                n3=n1+n2;    
                eighthNote(numNotes, guitar, note+=2, notSilent, notSilent);
                System.out.print(" "+n3);    
                eighthNote(numNotes, strings, x++, notSilent, notSilent);
                n1=n2; 
                eighthNote(numNotes, guitar, note--, notSilent, notSilent);
                n2=n3;  
                eighthNote(numNotes, guitar, note+=2, notSilent, notSilent);
                }    
        }
        catch(Exception ex){
           ex.printStackTrace();
        }
    }//GEN-LAST:event_fibonacciActionPerformed
public class MyMergeSort{
    int numNotes=32; 

    int silent = 0;

    int notSilent = 1;
  
    int keys = 1;
    int bells = 14;
    int guitar = 24;
    int bass = 39;
    int strings = 48;
    int trumpet = 58;
    int flute = 78;
    int organ = 89;
    int x=60;
    int note = 65;
    void merge(int arr[], int beg, int mid, int end){  
        int l = mid - beg + 1;  
        int r = end - mid;
        eighthNote(numNotes, bells, 65, notSilent, notSilent);
        eighthNote(numNotes, bells, 65, silent, silent);
        eighthNote(numNotes, bells, 65, silent, silent);
        int LeftArray[] = new int [l];  
        eighthNote(numNotes, bells, 65, notSilent, notSilent);
        eighthNote(numNotes, bells, 65, silent, silent);
        eighthNote(numNotes, bells, 65, silent, silent);
        int RightArray[] = new int [r];  
  
        for (int i=0; i<l; ++i) { 
            LeftArray[i] = arr[beg + i];  
            eighthNote(numNotes, keys, x, silent, silent);
            eighthNote(numNotes, keys, x, notSilent, notSilent);
            //eighthNote(numNotes, keys, x, silent, silent);
            x-=1;
        }
        x=65;
        for (int j=0; j<r; ++j) { 
            RightArray[j] = arr[mid + 1+ j];  
            eighthNote(numNotes, keys, x, silent, silent);
            eighthNote(numNotes, keys, x, notSilent, notSilent);
            //eighthNote(numNotes, keys, x, silent, silent);
            x+=1;
        }

        int i = 0, j = 0;  
        int k = beg;  
        while (i<l&&j<r){  
            //eighthNote(numNotes, organ, note-8, silent, silent);
            eighthNote(numNotes, organ, note-8, silent, silent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, silent, silent);
            //eighthNote(numNotes, organ, note-8, silent, silent);
            if (LeftArray[i] <= RightArray[j]){  
                eighthNote(numNotes, flute, note-4, notSilent, notSilent);
                
                arr[k] = LeftArray[i];  
                i++;  
                
            }  
            
            else{  
                eighthNote(numNotes, flute, note+4, notSilent, notSilent);
                arr[k] = RightArray[j];  
                j++;  
               
            }  
            k++;  
        }  
        while (i<l){  
            //eighthNote(numNotes, organ, note-8, silent, silent);
            eighthNote(numNotes, organ, note-8, silent, silent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, silent, silent);
            //eighthNote(numNotes, organ, note-8, silent, silent);
            arr[k] = LeftArray[i];  
            eighthNote(numNotes, bells, 55, notSilent, notSilent);
            eighthNote(numNotes, bells, 65, silent, silent);
            i++;  
            k++;  
        }  
        note=65;
        while (j<r){  
            //eighthNote(numNotes, organ, note-8, silent, silent);
            eighthNote(numNotes, organ, note-8, silent, silent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, notSilent, notSilent);
            eighthNote(numNotes, organ, note-8, silent, silent);
           // eighthNote(numNotes, organ, note-8, silent, silent);
            arr[k] = RightArray[j];  
            eighthNote(numNotes, bells, 55, notSilent, notSilent);
            eighthNote(numNotes, bells, 65, silent, silent);
            eighthNote(numNotes, bells, 65, silent, silent);
            j++;  
            k++;  
        }
        
    }  
  
    void sort(int arr[], int beg, int end){  
        if (beg<end){  
            eighthNote(numNotes, bells, 65, notSilent, notSilent);
            eighthNote(numNotes, bells, 65, silent, silent);
            eighthNote(numNotes, bells, 65, silent, silent);
            int mid = (beg+end)/2; 
            eighthNote(numNotes, bells, 67, notSilent, notSilent);
            eighthNote(numNotes, bells, 67, silent, silent);
            eighthNote(numNotes, bells, 67, silent, silent);
            sort(arr, beg, mid);  
            eighthNote(numNotes, bells, 67, notSilent, notSilent);
            eighthNote(numNotes, bells, 67, silent, silent);
            eighthNote(numNotes, bells, 67, silent, silent);
            sort(arr , mid+1, end);  
            eighthNote(numNotes, bells, 71, notSilent, notSilent);
            eighthNote(numNotes, bells, 71, silent, silent);
            eighthNote(numNotes, bells, 71, silent, silent);
            merge(arr, beg, mid, end);  
        }  
    }  
}  

    private void mergeSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeSortActionPerformed
        //merge sort
        
        int arr[] = {90,2,45,65,9,0};  
        MyMergeSort ob = new MyMergeSort();  
        ob.sort(arr, 0, arr.length-1);  
  
        System.out.println("\nSorted array");  
        for(int i =0; i<arr.length;i++){  
        System.out.println(arr[i]+"");  
        }
    }//GEN-LAST:event_mergeSortActionPerformed
 
   
    public int binary_Search(int intArray[], int low, int high, int key){  
        //if array is in order then perform binary search on the array
        int numNotes=32; 

        int silent = 0;

        int notSilent = 1;
  
        int keys = 1;
        int bells = 14;
        int guitar = 24;
        int bass = 39;
        int strings = 48;
        int trumpet = 58;
        int flute = 78;
        int organ = 89;
        int x=50;
        int note = 65;
        if (high>=low){  
            //calculate mid
            eighthNote(numNotes, bells, x, silent, silent);
            eighthNote(numNotes, bells, x, silent, silent);
            eighthNote(numNotes, bells, x, notSilent, notSilent);
            eighthNote(numNotes, bells, x, silent, silent);
            eighthNote(numNotes, bells, x, silent, silent);

            int mid = low + (high - low)/2;  
            //if key =intArray[mid] return mid
            if (intArray[mid] == key){ 
                eighthNote(numNotes, bells, x+8, notSilent, notSilent);
                eighthNote(numNotes, bells, x+8, silent, silent);
                eighthNote(numNotes, bells, x+8, silent, silent);
                return mid;  
            }  
            //if intArray[mid] > key then key is in left half of array
            if (intArray[mid] > key){ 
                eighthNote(numNotes, flute, note+8, notSilent, notSilent);
                eighthNote(numNotes, flute, note+8, silent, silent);
                eighthNote(numNotes, flute, note+8, silent, silent);
                return binary_Search(intArray, low, mid-1, key);//recursively search for key  
            }
            else{  //key is in right half
                eighthNote(numNotes, strings, note-8, notSilent, notSilent);
                eighthNote(numNotes, strings, note-8, silent, silent);
                eighthNote(numNotes, strings, note-8, silent, silent);
                return binary_Search(intArray, mid+1, high, key);//recursively search for key 
            }  
        }  
        eighthNote(numNotes, trumpet, note, silent, silent);
        eighthNote(numNotes, trumpet, note, silent, silent);
        eighthNote(numNotes, trumpet, note, notSilent, notSilent);
        return -1;  
    }

    private void binarySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binarySearchActionPerformed
        //binary search
        int intArray[] = {1,11,21,31,41,51,61,71,81,91}; 
        System.out.println("Input List: " + Arrays.toString(intArray));
        int key = 31;  
        System.out.println("\nThe key to be searched:" + key);
        int high=intArray.length-1;
        //call binary search method 
        int result = binary_Search(intArray,0,high,key);  
        //print the result
        if (result == -1)  
            System.out.println("\nKey not found in given list!");  
        else 
            System.out.println("\nKey is found at location: "+result + " in the list");  
   
    }//GEN-LAST:event_binarySearchActionPerformed
class QuickSort { 
    //selects last element as pivot, pi using which array is partitioned. 
    int numNotes=32; 
    int silent = 0;
    int notSilent = 1;
    int keys = 1;
    int bells = 14;
    int guitar = 24;
    int bass = 39;
    int strings = 48;
    int trumpet = 58;
    int flute = 78;
    int organ = 89;
    int x=50;
    int note = 65;
    int partition(int intArray[], int low, int high) { 
        int pi = intArray[high];  
        //eighthNote(numNotes, trumpet, note, silent, silent);
        eighthNote(numNotes, trumpet, note, silent, silent);
        eighthNote(numNotes, trumpet, note, notSilent, notSilent);
        int i = (low-1); // smaller element index   
        //eighthNote(numNotes, trumpet, note-4, silent, silent);
        eighthNote(numNotes, trumpet, note-4, silent, silent);
        eighthNote(numNotes, trumpet, note-4, notSilent, notSilent);
        for (int j=low; j<high; j++) { 
            // check if current element is less than or equal to pi 
            if (intArray[j] <= pi) { 
                eighthNote(numNotes, bells, note, silent, silent);
                eighthNote(numNotes, bells, note, silent, silent);
                eighthNote(numNotes, bells, note, notSilent, notSilent);
                i++; 
                // swap intArray[i] and intArray[j] 
                //eighthNote(numNotes, strings, note, silent, silent);
                eighthNote(numNotes, strings, note, silent, silent);
                eighthNote(numNotes, strings, note, notSilent, notSilent);
                int temp = intArray[i]; 
                //eighthNote(numNotes, strings, note-1, silent, silent);
                eighthNote(numNotes, strings, note-1, silent, silent);
                eighthNote(numNotes, strings, note-1, notSilent, notSilent);
                intArray[i] = intArray[j]; 
                //eighthNote(numNotes, strings, note, silent, silent);
                eighthNote(numNotes, strings, note, silent, silent);
                eighthNote(numNotes, strings, note, notSilent, notSilent);
                intArray[j] = temp; 
            } 
            eighthNote(numNotes, flute, x+8, silent, silent);
            eighthNote(numNotes, flute, x+8, silent, silent);
            eighthNote(numNotes, flute, x++, notSilent, notSilent);
            
        } 
   
        // swap intArray[i+1] and intArray[high] (or pi)
        eighthNote(numNotes, keys, note, silent, silent);
        eighthNote(numNotes, keys, note, silent, silent);
        eighthNote(numNotes, keys, note, notSilent, notSilent);
        int temp = intArray[i+1]; 
        //eighthNote(numNotes, keys, note+1, silent, silent);
        eighthNote(numNotes, keys, note+1, silent, silent);
        eighthNote(numNotes, keys, note+1, notSilent, notSilent);
        intArray[i+1] = intArray[high]; 
        //eighthNote(numNotes, keys, note, silent, silent);
        eighthNote(numNotes, keys, note, silent, silent);
        eighthNote(numNotes, keys, note, notSilent, notSilent);
        intArray[high] = temp; 
   
        eighthNote(numNotes, flute, note+4, silent, silent);
        eighthNote(numNotes, flute, note+4, silent, silent);
        eighthNote(numNotes, flute, note+4, notSilent, notSilent);
        return i+1; 
    } 
   
   
  //routine to sort the array partitions recursively
    void quick_sort(int intArray[], int low, int high) { 
        if (low < high) { 
            //partition the array around pi=>partitioning index and return pi
            //eighthNote(numNotes, trumpet, note+8, silent, silent);
            eighthNote(numNotes, trumpet, note+8, silent, silent);
            eighthNote(numNotes, trumpet, note+8, notSilent, notSilent);
            int pi = partition(intArray, low, high); 
   
            // sort each partition recursively 
            quick_sort(intArray, low, pi-1); 
            quick_sort(intArray, pi+1, high); 
        } 
        //eighthNote(numNotes, trumpet, note-8, silent, silent);
        eighthNote(numNotes, trumpet, note-8, silent, silent);
        eighthNote(numNotes, trumpet, note-8, notSilent, notSilent);
    } 
}
 
    private void quickSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickSortActionPerformed
        //quick sort
        int intArray[] = {1,6,8,0,5}; 
        int n = intArray.length; 
        //print the original array
        System.out.println("Original Array: " + Arrays.toString(intArray));
        //call quick_sort routine using QuickSort object
        QuickSort obj = new QuickSort(); 
        obj.quick_sort(intArray, 0, n-1); 
        //print the sorted array
        System.out.println("\nSorted Array: " + Arrays.toString(intArray)); 
    }//GEN-LAST:event_quickSortActionPerformed

    
    public void eighthNote(int numNotes, int instrumentType, int noteType, int sustain, int silence){
        int volume = 100;
        int beats = 142;
        int timing = 75;
        try{
        Sequencer sequencer = MidiSystem.getSequencer();
        Sequence sequence = new Sequence(Sequence.PPQ,4);
        if (silence == 1){
        Track track = sequence.createTrack();
        for (int i = 1; i < (sustain*numNotes); i += 12){
            track.add(makeEvent(192, 1, instrumentType, 0, 1));
            track.add(makeEvent(144, 1, noteType, volume, 1));
            track.add(makeEvent(128, 1, noteType, timing, 4));
            
        }
        sequencer.setSequence(sequence);
        sequencer.open();
        sequencer.setTempoInBPM(beats);
        sequencer.start();}

        else{
        sequencer = MidiSystem.getSequencer();
        Track track = sequence.createTrack();
        for (int i = 1; i < (sustain*numNotes); i += 1){
            track.add(makeEvent(144, instrumentType, noteType, volume, 9));
            track.add(makeEvent(128, 1, 100, timing, 12));
            
        }
        sequencer.setSequence(sequence);
        sequencer.open();
        sequencer.setTempoInBPM(beats);
        }

        }
        catch(Exception ex){
           ex.printStackTrace();
        }
    }
    
    
    public MidiEvent makeEvent(int command, int channel, int note, int velocity, int tick)
{
    MidiEvent event = null;
    
    try{
    ShortMessage a = new ShortMessage();
    a.setMessage(command, channel, note, velocity);
    event = new MidiEvent(a, tick);
        
    }
    catch(Exception ex){
        ex.printStackTrace();
    }
    return event;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PushButton.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PushButton.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PushButton.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PushButton.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PushButton().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton binarySearch;
    private javax.swing.JButton bubblesort;
    private javax.swing.JButton fibonacci;
    private javax.swing.JButton isEvenOrOdd;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jumpSearch;
    private javax.swing.JButton linearSearch;
    private javax.swing.JButton mergeSort;
    private javax.swing.JButton quickSort;
    // End of variables declaration//GEN-END:variables

}
